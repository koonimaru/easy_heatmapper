Metadata-Version: 1.1
Name: easy-heatmapper
Version: 0.0.0
Summary: Drawing clustered heatmap.
Home-page: UNKNOWN
Author: Koh Onimaru
Author-email: koh.onimaru@gmail.com
License: UNKNOWN
Description: # easy_heatmapper
        A python module to create clustered heatmaps and output clusters.
        
        Introduction
        ------------
        easy_heatmapper is a python module to easily draw clustered heatmaps, clustered scatter plot and write cluster information in a text file. 
        
        To draw a heatmap, a function called "heatmapper" uses hierarchical clustering with euclidean distance and ward method. It can also apply PCA, t-SNE, UMAP to reduce the dimension of data before hierarchical clustering. 
        
        This module also includes a scatter plot function to plot dimension-reduced data colored by automatically detected clusters with hierarchical clustering.
        
        Installation
        ------------
        
        System-wide installation..
        
        	git clone https://github.com/koonimaru/easy_heatmapper.git
        	cd easy_heatmapper
        	sudo pip3 install .
        
        Using a virtual environment..
        	
        	sudo apt-get install python3-venv #If you do not have one.
        	git clone https://github.com/koonimaru/easy_heatmapper.git
        	cd easy_heatmapper
        	python3 -m venv ./
        	source bin/activate
        	pip3 install .
        
        Test installation
        -----------------
        
        	cd easy_heatmapper
        	python3 test.py
        
        will create a random heatmapper.
        
        Usage
        -----
        
        **easy_heatmapper.heatmapper(X, xLabels=[],yLabels=[], save=, WRITE_CLUSTER=True, methods="tsne",CPU=, cluster_both=True, SHOW=True)**
        
        X: M x N array.
        
        xLabels: N array. The labels/names of data X by column.
        
        yLabels: M array. The labels/names of data X by row.
        
        save: a saving directory with a prefix, e.g., "/home/foo/test". Default is a current directory. If you set as "", no files will be saved.
        
        WRITE_CLUSTER: True or False. Choose if cluster information is output or not. Default=True.
        
        methods: "", "tsne", "umap", "pca". Dimension reduction methods to apply before hierarchical clustering.
        
        CPU: CPU number to use. It has effect only when tsne methods is used.
        
        cluster_both: If True, cluster both x and y axis of data.
        
        SHOW: If True, show a heatmap in runtime.
        
        &nbsp;
        
        
        **easy_heatmapper.scatter(X,yLabels=[], save=, WRITE_CLUSTER=True, methods="tsne",CPU=, SHOW=True)**
        
        X: M x N array.
        
        xLabels: N array. The labels/names of data X by column.
        
        yLabels: M array. The labels/names of data X by row.
        
        save: a saving directory with a prefix, e.g., "/home/foo/test". Default is a current directory. If you set as "", no files will be saved.
        
        WRITE_CLUSTER: True or False. Choose if cluster information is output or not. Default=True.
        
        methods: "", "tsne", "umap", "pca". Dimension reduction methods to apply before hierarchical clustering.
        
        CPU: CPU number to use. It has effect only when tsne methods is used.
        
        cluster_both: If True, cluster both x and y axis of data.
        
        SHOW: If True, show a heatmap in runtime.
        
        
        Example
        -------
        
        ~~~python
        import easy_heatmapper as eh
        import numpy as np
        
        #creating noisy matrix
        b=np.random.normal(0,1, size=(25,25))
        for i in range(10):
        	b=np.concatenate((b, np.random.normal(i+1, 1, size=(25,25) )), axis=0)
        b[:]+=np.arange(25)/5.0
        np.random.shuffle(b)
        
        eh.heatmapper(b)
        ~~~
        
        ![heatmap](heatmapper.png)
        
        ~~~python
        import easy_heatmapper as eh
        import numpy as np
        
        #creating noisy matrix
        b=np.random.normal(0,1, size=(25,25))
        for i in range(10):
        	b=np.concatenate((b, np.random.normal(i+1, 1, size=(25,25) )), axis=0)
        b[:]+=np.arange(25)/5.0
        np.random.shuffle(b)
        
        
        eh.scatter(b)
        ~~~
        
        ![scatter](tsne_with_color.png)
Platform: UNKNOWN
Classifier: Development Status :: 3 - Alpha
Classifier: Environment :: Console
Classifier: Intended Audience :: Developers
Classifier: Programming Language :: Python :: 3.6
Classifier: License :: OSI Approved :: Apache Software License 
Classifier: Operating System :: POSIX :: Linux
Classifier: Topic :: Scientific/Engineering :: Bio-Informatics
Classifier: Topic :: Scientific/Engineering :: Artificial Intelligence
Provides: easy_heatmapper
